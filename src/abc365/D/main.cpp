#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

unordered_map<char, char> um_win = {{'R', 'P'}, {'S', 'R'}, {'P', 'S'}};
unordered_map<char, char> um_lose = {{'R', 'S'}, {'S', 'P'}, {'P', 'R'}};

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int N;
  cin >> N;
  string S;
  cin >> S;

  vector<unordered_map<char, int>> dp(N + 1);
  // initial hand can select all pattern
  dp[0]['-'] = 0;

  for (int i = 1; i <= N; i++) {
    // loop all current hand
    for (auto j : {'R', 'P', 'S'}) {
      // Judge win
      int val = 0;
      if (j == um_win[S[i - 1]]) val = 1;
      // Should not lose
      if (j == um_lose[S[i - 1]]) continue;

      // Set max win from previous hand
      for (auto [key, value] : dp[i - 1]) {
        // Sould not use same hand
        if (j == key) continue;
        dp[i][j] = max(dp[i][j], dp[i - 1][key] + val);
      }
    }
  }
  int ans = 0;
  for (auto [_, val] : dp[N]) {
    ans = max(ans, val);
  }
  cout << ans << endl;
  return 0;
}
