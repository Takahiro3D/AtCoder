#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

struct Coord {
  int64_t x;
  int64_t y;
};

// Move X with no cost
void tryToMoveX(const Coord& T, Coord& S) {
  if (S.x < T.x) {
    // right
    if (((S.x + S.y) % 2) == 0) {
      S.x++;
    }
  } else if (S.x > T.x) {
    // left
    if (((S.x + S.y) % 2) == 1) {
      S.x--;
    }
  }
}

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  Coord S, T;
  cin >> S.x >> S.y;
  cin >> T.x >> T.y;

  int64_t ans = 0;

  tryToMoveX(T, S);

  int64_t moveY = abs(T.y - S.y);
  S.y = T.y;
  ans += moveY;

  int64_t distX = abs(T.x - S.x);
  if (distX > moveY) {
    // X-axis can be moved by Y-axis movement
    if (S.x < T.x) {
      // right
      S.x += moveY;
    } else if (S.x > T.x) {
      // left
      S.x -= moveY;
    }
  } else {
    // X-axis can be moved no cost.
    S.x = T.x;
  }

  // move x
  tryToMoveX(T, S);
  int64_t moveX = abs(T.x - S.x);
  ans += (moveX + 1) / 2;

  cout << ans << endl;

  return 0;
}
