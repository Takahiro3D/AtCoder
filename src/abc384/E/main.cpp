#include <bits/stdc++.h>
using namespace std;

using Mat = vector<vector<int64_t>>;

vector<vector<int64_t>> S(500, vector<int64_t>(500, 0));
/// up, down, left, right
int r[] = {0, 0, -1, 1};
int c[] = {1, -1, 0, 0};

struct CustomCompare {
  bool operator()(const std::pair<int, int>& a, const std::pair<int, int>& b) {
    return S[a.first][a.second] > S[b.first][b.second];
  }
};

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int H, W, X;
  cin >> H >> W >> X;

  int P, Q;
  cin >> P >> Q;
  P--;
  Q--;

  for (int i = 0; i < H; i++) {
    for (int j = 0; j < W; j++) {
      cin >> S[i][j];
    }
  }

  priority_queue<pair<int, int>, std::vector<pair<int, int>>, CustomCompare> q;
  vector<vector<bool>> visited(H, vector<bool>(W, false));
  auto tryEmplace = [&](int h, int w) {
    for (int i = 0; i < 4; i++) {
      auto x = h + c[i];
      auto xIsInRange = (x >= 0) && (x < H);
      auto y = w + r[i];
      auto yIsInRange = (y >= 0) && (y < W);
      if (xIsInRange && yIsInRange && !visited[x][y]) {
        q.emplace(x, y);
      }
    }
  };

  int64_t sum = S[P][Q];
  visited[P][Q] = true;
  tryEmplace(P, Q);

  while ((!q.empty())) {
    auto coord = q.top();
    q.pop();
    auto s = S[coord.first][coord.second];
    if (s < ((sum + X - 1) / X)) {
      sum += s;
      visited[coord.first][coord.second] = true;
      tryEmplace(coord.first, coord.second);
    } else {
      break;
    }
  }

  cout << sum << endl;

  return 0;
}
