#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

auto solve(int64_t N, int T, const std::vector<int64_t> &A, const std::vector<int64_t> &B) {
  vector<int64_t> ans;
  // Player score list
  vector<int64_t> S(N, 0);
  // Score kind map: score - player num
  unordered_map<int64_t, int64_t> um;
  for (int64_t i = 0; i < N; i++) {
    um[0]++;
  }

  for (int i = 0; i < T; i++) {
    auto a = A[i] - 1;
    // Pop the player from score map
    um[S[a]]--;
    if (um[S[a]] == 0) {
      um.erase(S[a]);
    }

    S[a] += B[i];
    // Insert score map
    um[S[a]]++;

    ans.emplace_back(um.size());
  }

  return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int64_t N;
  int T;
  std::cin >> N >> T;
  std::vector<int64_t> A(T), B(T);
  REP(i, T) { std::cin >> A[i] >> B[i]; }
  auto ans = solve(N, T, A, B);
  REP(i, T) { std::cout << ans[i] << '\n'; }
  return 0;
}
