#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

int64_t solve(int64_t N) {
  const string S = to_string(N);
  const size_t digit = S.size();

  const int64_t maxNumPow = (digit - 1) / 3;
  int64_t maxNum = pow(10, min(maxNumPow + 1, 6L));
  int64_t K = 0L;
  for (int64_t i = maxNum; i > 0; i--) {
    int64_t tempNum = pow(i, 3);

    bool isParidrome = true;
    string tempStr = to_string(tempNum);
    const auto len = tempStr.size();
    for (size_t j = 0; j < (len / 2); j++) {
      if (tempStr[j] != tempStr[len - j - 1]) {
        isParidrome = false;
        break;
      }
    }

    if ((tempNum <= N) && isParidrome) {
      K = tempNum;
      break;
    }
  }
  return K;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int64_t N;
  std::cin >> N;
  auto ans = solve(N);
  std::cout << ans << '\n';
  return 0;
}
