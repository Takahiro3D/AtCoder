#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

int64_t solve(const vector<std::vector<int64_t>> &A) {
  const int H = A.size();
  const int W = A[0].size();
  int64_t ans = 0;
  auto f = [&](auto f, vector<vector<bool>> covered, int i, int j) {
    if (j == W) {
      // Shift next row
      j = 0;
      i++;
    }
    if (i == H) {
      // Calculate score
      int64_t now = 0;
      REP(ni, H) {
        REP(nj, W) {
          if (!covered[ni][nj]) {
            now ^= A[ni][nj];
          }
        }
      }
      ans = max(ans, now);
      return;
    }
    if (covered[i][j]) {
      // Already put domino
      // Move next index
      f(f, covered, i, j + 1);
    } else {
      // Don't put new domino
      f(f, covered, i, j + 1);
      // Put new domino with horizontal
      if (j + 1 < W && !covered[i][j + 1]) {
        covered[i][j] = covered[i][j + 1] = true;
        f(f, covered, i, j + 1);
        covered[i][j] = covered[i][j + 1] = false;
      }
      // Put new domino with vertical
      if (i + 1 < H && !covered[i + 1][j]) {
        covered[i][j] = covered[i + 1][j] = true;
        f(f, covered, i, j + 1);
        covered[i][j] = covered[i + 1][j] = false;
      }
    }
  };
  f(f, vector(H, vector<bool>(W)), 0, 0);
  return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int H, W;
  std::cin >> H >> W;
  vector<std::vector<int64_t>> A(H, vector<int64_t>(W));
  REP(i, H) {
    REP(j, W) { std::cin >> A[i][j]; }
  }
  auto ans = solve(A);
  std::cout << ans << '\n';
  return 0;
}
