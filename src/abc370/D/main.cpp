#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int H, W, Q;
  cin >> H >> W >> Q;

  vector<set<int>> S_row(H);
  vector<set<int>> S_col(W);
  for (int i = 0; i < H; i++) {
    for (int j = 0; j < W; j++) {
      S_row[i].emplace(j);
      S_col[j].emplace(i);
    }
  }

  auto erase = [&](int i, int j) {
    S_row[i].erase(j);
    S_col[j].erase(i);
  };

  for (int i = 0; i < Q; i++) {
    int R, C;
    cin >> R >> C;
    R--;
    C--;

    auto& s_row = S_row[R];
    auto it = s_row.lower_bound(C);
    if ((it != s_row.end()) && (*it == C)) {
      erase(R, *it);
      continue;
    }

    // Right
    if (it != s_row.end()) {
      erase(R, *it);
    }
    // Left
    it = s_row.lower_bound(C);
    if (it != s_row.begin()) {
      it--;
      erase(R, *it);
    }

    auto& s_col = S_col[C];
    it = s_col.lower_bound(R);
    // Down
    if (it != s_col.end()) {
      erase(*it, C);
    }
    // Up
    it = s_col.lower_bound(R);
    if (it != s_col.begin()) {
      it--;
      erase(*it, C);
    }
  }

  int ans = 0;
  for (int i = 0; i < H; i++) {
    ans += S_row[i].size();
  }
  cout << ans << endl;

  return 0;
}
