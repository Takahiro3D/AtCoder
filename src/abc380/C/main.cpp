#include <bits/stdc++.h>
using namespace std;

vector<pair<int, int>> rle_compress(string& S) {
  vector<pair<int, int>> result;
  int n = S.size();

  for (int i = 0; i < n; ++i) {
    auto current_char = S[i];
    int count = 1;

    // 連続する同じ文字を数える
    while (i + 1 < n && S[i + 1] == current_char) {
      ++count;
      ++i;
    }

    // 結果文字列に追加
    int current_num = S[i] - '0';
    result.emplace_back(current_num, count);
  }

  return result;
}

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int N, K;
  cin >> N >> K;

  string S;
  cin >> S;

  auto rle = rle_compress(S);

  auto rle_decode = [](int num, int count) {
    string ret;
    auto s = to_string(num);
    for (int c = 0; c < count; c++) {
      ret += s;
    }
    return ret;
  };

  int i = 0;
  string ans;
  int size = rle.size();
  for (int j = 0; j < size; j++) {
    auto [num, count] = rle[j];
    if (num == 1) {
      i++;
      if (i != K) {
        ans += rle_decode(num, count);
      }
      if (i == K - 1) {
        auto [next_num, next_count] = rle[j + 2];
        ans += rle_decode(next_num, next_count);
      }
    } else {
      ans += rle_decode(num, count);
    }
  }

  cout << ans << endl;

  return 0;
}
