#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

std::vector<int64_t> solve(int N, const std::vector<int64_t> &A, const std::vector<int64_t> &C) {
  using Pint = pair<int64_t, pair<int64_t, int64_t>>;
  using Vp = vector<Pint>;
  Vp vp(N);
  for (int i = 0; i < N; i++) {
    vp[i].first = i;
    vp[i].second.first = A[i];
    vp[i].second.second = C[i];
  }

  sort(vp.begin(), vp.end(), [](const Pint &vp1, const Pint &vp2) {
    bool Ai = vp1.second.first != vp2.second.first;
    return Ai ? vp1.second.first > vp2.second.first : vp1.second.second > vp2.second.second;
  });

  int64_t min_cost = INT64_MAX;
  vector<int64_t> remain_cards;
  remain_cards.emplace_back(vp[0].first + 1);
  min_cost = min(min_cost, vp[0].second.second);
  int i = 0;
  while (i < N - 1) {
    auto j = i + 1;
    if (vp[i].second.first == vp[j].second.first) {
      remain_cards.emplace_back(vp[j].first + 1);
      min_cost = min(min_cost, vp[j].second.second);
    } else {
      int64_t tmp_min_cost = INT64_MAX;
      if (vp[j].second.second < min_cost) {
        remain_cards.emplace_back(vp[j].first + 1);
        tmp_min_cost = min(tmp_min_cost, vp[j].second.second);
      }
      while (j + 1 < N && (vp[j].second.first == vp[j + 1].second.first)) {
        if (vp[j + 1].second.second < min_cost) {
          remain_cards.emplace_back(vp[j + 1].first + 1);
          tmp_min_cost = min(tmp_min_cost, vp[j + 1].second.second);
        }
        j++;
      }
      min_cost = min(min_cost, tmp_min_cost);
    }
    i = j;
  }
  sort(remain_cards.begin(), remain_cards.end());
  return remain_cards;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int N;
  std::cin >> N;
  std::vector<int64_t> A(N), C(N);
  REP(i, N) { std::cin >> A[i] >> C[i]; }
  auto ans = solve(N, A, C);
  std::cout << (int)ans.size() << '\n';
  REP(j, (int)ans.size()) { std::cout << ans[j] << ' '; }
  std::cout << '\n';
  return 0;
}
