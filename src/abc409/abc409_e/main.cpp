#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

struct Edge {
  int to, cost;
};

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);

  int N;
  cin >> N;

  vector<int> x(N);
  REP(i, N) { cin >> x[i]; }

  vector<vector<Edge>> g(N);
  REP(i, N - 1) {
    int u, v, w;
    cin >> u >> v >> w;
    u--;
    v--;
    g[u].emplace_back(v, w);
    g[v].emplace_back(u, w);
  }

  int64_t ans = 0;
  auto dfs = [&](auto dfs, int v, int p = -1) -> int64_t {
    auto total = x[v];
    for (auto edge : g[v]) {
      if (edge.to == p) continue;
      auto e = dfs(dfs, edge.to, v);
      ans += static_cast<int64_t>(edge.cost) * abs(e);
      total += e;
    }
    return total;
  };
  dfs(dfs, 0);
  cout << ans << endl;

  return 0;
}
