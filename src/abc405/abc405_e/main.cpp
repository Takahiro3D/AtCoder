#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

constexpr int64_t MOD = 998244353;

int64_t factorical(int n) {
  int64_t ans = 1;
  for (int i = 2; i < n; i++) {
    ans *= i;
    ans %= MOD;
  }
  return ans;
}

int64_t count_unique_permutations(int64_t a, int64_t b) {
  // (a+b)!/(a!*b!)
  // simplify a fraction with bigger num
  // e.g. a>b : (a+b)P(b)/b!
  int64_t denominator = factorical(min(a, b));
  int64_t numerator = 1;
  int m = max(a, b);
  for (int i = m; i <= (a + b); i++) {
    numerator *= i;
  }
  return numerator / denominator % MOD;
}

int64_t solve(int64_t A, int64_t B, int64_t C, int64_t D) {
  auto ans1 = count_unique_permutations(A, B) * count_unique_permutations(C, D) % MOD;
  auto ans2 = count_unique_permutations(B, C);
  return (ans1 + ans2 - 1) % MOD;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int64_t A, B, C, D;
  std::cin >> A >> B >> C >> D;
  auto ans = solve(A, B, C, D);
  std::cout << ans << '\n';
  return 0;
}
