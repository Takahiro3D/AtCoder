#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

struct Food {
  int x;
  int y;
};

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int64_t N, X, Y;
  cin >> N >> X >> Y;

  vector<Food> foods(N);
  for (auto& food : foods) {
    cin >> food.x;
  }
  for (auto& food : foods) {
    cin >> food.y;
  }

  int ans = N;

  sort(foods.begin(), foods.end(), [](Food& f1, Food& f2) { return f1.x > f2.x; });
  int size = foods.size();
  int64_t sum_x = 0;
  for (int i = 0; i < size; i++) {
    sum_x += foods[i].x;
    if (sum_x > X) {
      ans = min(i + 1, ans);
      break;
    }
  }

  sort(foods.begin(), foods.end(), [](Food& f1, Food& f2) { return f1.y > f2.y; });
  int64_t sum_y = 0;
  for (int i = 0; i < size; i++) {
    sum_y += foods[i].y;
    if (sum_y > Y) {
      ans = min(i + 1, ans);
      break;
    }
  }

  cout << ans << endl;

  return 0;
}
