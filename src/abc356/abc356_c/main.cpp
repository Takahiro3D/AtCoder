#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

int64_t solve(int64_t n, int m, int64_t k, const std::vector<int64_t> &c, const std::vector<std::vector<int64_t> > &a,
              const std::vector<char> &r) {
  int ans = 0;
  for (int i = 0; i < (1 << n); i++) {
    bitset<15> keys = i;
    bool judge = true;
    for (int j = 0; j < m; j++) {
      int ck = 0;
      for (int p = 0; p < n; p++) {
        if (keys[a[j][p] - 1]) {
          ck++;
        }
      }
      // Check contradiction
      if (ck >= k && r[j] == 'x') {
        judge = false;
      }
      if (ck < k && r[j] == 'o') {
        judge = false;
      }
    }
    if (judge) {
      ans++;
    }
  }
  return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judgege-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int64_t N;
  int M;
  int64_t K;
  std::cin >> N >> M >> K;
  std::vector<int64_t> C(M);
  std::vector<std::vector<int64_t> > A(M, std::vector<int64_t>(N));
  std::vector<char> R(M);
  REP(i, M) {
    std::cin >> C[i];
    REP(j, C[i]) { std::cin >> A[i][j]; }
    std::cin >> R[i];
  }
  auto ans = solve(N, M, K, C, A, R);
  std::cout << ans << '\n';
  return 0;
}
