#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

struct St {
  int64_t node;
  int64_t value;
  bitset<10> visited;
};

int64_t solve(int64_t N, int M, std::vector<int64_t> &u, std::vector<int64_t> &v, const std::vector<int64_t> &w) {
  vector<vector<pair<int64_t, int64_t>>> G(10);
  REP(i, M) {
    u[i]--;
    v[i]--;
    G[u[i]].emplace_back(v[i], w[i]);
    G[v[i]].emplace_back(u[i], w[i]);
  }

  // search all simple path with DFS
  stack<St> st;
  int64_t ans = INT64_MAX;

  for (auto p : G[0]) {
    bitset<10> visited;
    visited[0] = true;
    st.emplace(p.first, p.second, visited);
  }

  while (!st.empty()) {
    auto n = st.top();
    st.pop();
    if (n.node == (N - 1)) {
      // Reached to goal
      ans = min(ans, n.value);
      continue;
    }

    n.visited[n.node] = true;

    for (auto p : G[n.node]) {
      if (!n.visited[p.first]) {
        auto xor_value = p.second ^ n.value;
        st.emplace(p.first, xor_value, n.visited);
      }
    }
  }
  return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int64_t N;
  int M;
  std::cin >> N >> M;
  std::vector<int64_t> u(M), v(M), w(M);
  REP(i, M) { std::cin >> u[i] >> v[i] >> w[i]; }
  auto ans = solve(N, M, u, v, w);
  std::cout << ans << '\n';
  return 0;
}
