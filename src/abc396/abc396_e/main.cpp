#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

vector<int> solve(int64_t N, int M, std::vector<int64_t> &X, std::vector<int64_t> &Y, const std::vector<int64_t> &Z) {
  vector<vector<pair<int, bitset<31>>>> G(N);
  REP(i, M) {
    X[i]--;
    Y[i]--;
    G[X[i]].emplace_back(Y[i], Z[i]);
    G[Y[i]].emplace_back(X[i], Z[i]);
  }

  bool ok = true;
  vector<int> ans(N);
  // Loop each digits with binary
  REP(k, 30) {
    // binary value for each nodes
    vector<int> bin_value(N, -1);

    REP(n, N) {
      // node corresponding value
      vector<vector<int>> nodes(2);

      // Skip the value is already evaluated
      if (bin_value[n] != -1) {
        continue;
      }

      auto dfs = [&](auto dfs, int v, int c) {
        if (bin_value[v] != -1) {
          if (bin_value[v] != c) {
            // the value is contradiction
            ok = false;
          }
          return;
        }
        bin_value[v] = c;
        nodes[c].push_back(v);
        for (auto [to, z] : G[v]) {
          dfs(dfs, to, c ^ z[k]);
        }
      };
      dfs(dfs, n, 0);
      if (nodes[0].size() < nodes[1].size()) {
        // The condition is met even if the values are swapped
        swap(nodes[0], nodes[1]);
      }
      for (int node : nodes[1]) {
        ans[node] |= 1 << k;
      }
    }
  }

  return ok ? ans : vector<int>(1, -1);
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int64_t N;
  int M;
  std::cin >> N >> M;
  std::vector<int64_t> X(M), Y(M), Z(M);
  REP(i, M) { std::cin >> X[i] >> Y[i] >> Z[i]; }
  auto ans = solve(N, M, X, Y, Z);
  for (auto a : ans) {
    cout << a << " ";
  }
  std::cout << '\n';
  return 0;
}
