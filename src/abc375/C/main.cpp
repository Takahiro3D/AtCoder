#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int N;
  cin >> N;
  vector<vector<char>> A(N, vector<char>(N, '.'));
  for (auto& row : A) {
    for (auto& a : row) {
      cin >> a;
    }
  }

  vector<vector<char>> A_result(N, vector<char>(N, '.'));
  for (int i = 0; i < (N / 2); i++) {
    auto rot_type = i % 4;
    switch (rot_type) {
      case 0: {
        // rotate 90[deg]
        // top
        auto r = i;
        for (int c = i; c < (N - i); c++) {
          A_result[c][N - 1 - r] = A[r][c];
        }
        // bottom
        r = N - 1 - i;
        for (int c = i; c < (N - i); c++) {
          A_result[c][N - 1 - r] = A[r][c];
        }
        // left
        auto c = i;
        for (int r = i; r < (N - i); r++) {
          A_result[c][N - 1 - r] = A[r][c];
        }
        // right
        c = N - 1 - i;
        for (int r = i; r < (N - i); r++) {
          A_result[c][N - 1 - r] = A[r][c];
        }
      } break;
      case 1: {
        // rotate 180[deg]
        // top
        auto r = i;
        for (int c = i; c < (N - i); c++) {
          A_result[N - 1 - r][N - 1 - c] = A[r][c];
        }
        // bottom
        r = N - 1 - i;
        for (int c = i; c < (N - i); c++) {
          A_result[N - 1 - r][N - 1 - c] = A[r][c];
        }
        // left
        auto c = i;
        for (int r = i; r < (N - i); r++) {
          A_result[N - 1 - r][N - 1 - c] = A[r][c];
        }
        // right
        c = N - 1 - i;
        for (int r = i; r < (N - i); r++) {
          A_result[N - 1 - r][N - 1 - c] = A[r][c];
        }
      } break;
      case 2: {
        // rotate 270(-90)[deg]
        // top
        auto r = i;
        for (int c = i; c < (N - i); c++) {
          A_result[N - 1 - c][r] = A[r][c];
        }
        // bottom
        r = N - 1 - i;
        for (int c = i; c < (N - i); c++) {
          A_result[N - 1 - c][r] = A[r][c];
        }
        // left
        auto c = i;
        for (int r = i; r < (N - i); r++) {
          A_result[N - 1 - c][r] = A[r][c];
        }
        // right
        c = N - 1 - i;
        for (int r = i; r < (N - i); r++) {
          A_result[N - 1 - c][r] = A[r][c];
        }
      } break;
      case 3: {
        // rotate 0[deg]
        // top
        auto r = i;
        for (int c = i; c < (N - i); c++) {
          A_result[r][c] = A[r][c];
        }
        // bottom
        r = N - 1 - i;
        for (int c = i; c < (N - i); c++) {
          A_result[r][c] = A[r][c];
        }
        // left
        auto c = i;
        for (int r = i; r < (N - i); r++) {
          A_result[r][c] = A[r][c];
        }
        // right
        c = N - 1 - i;
        for (int r = i; r < (N - i); r++) {
          A_result[r][c] = A[r][c];
        }
      } break;
      default:
        break;
    }
  }

  for (auto& row : A_result) {
    for (auto& a : row) {
      cout << a;
    }
    cout << "\n";
  }

  return 0;
}
