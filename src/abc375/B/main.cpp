#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

int64_t pow2(int64_t a) { return a * a; }

struct Coord {
  int x;
  int y;
};

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int N;
  cin >> N;
  vector<Coord> C(N);
  for (auto& c : C) {
    cin >> c.x >> c.y;
  }

  double ans = 0.0;
  auto start_square_num = static_cast<double>(pow2(0L - C[0].x) + pow2(0L - C[0].y));
  ans += sqrt(start_square_num);
  for (int i = 0; i < N - 1; i++) {
    auto square_num = static_cast<double>(pow2(C[i].x - C[i + 1].x) + pow2(C[i].y - C[i + 1].y));
    ans += sqrt(square_num);
  }
  auto end_square_num = static_cast<double>(pow2(0L - C[N - 1].x) + pow2(0L - C[N - 1].y));
  ans += sqrt(end_square_num);

  cout << std::fixed << ans << endl;

  return 0;
}
