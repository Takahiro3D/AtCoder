#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

using P = pair<int, int>;

map<char, int> moveX = {{'N', -1}, {'W', 0}, {'S', 1}, {'E', 0}};
map<char, int> moveY = {{'N', 0}, {'W', -1}, {'S', 0}, {'E', 1}};

std::string solve(int64_t N, int64_t R, int64_t C, std::string S) {
  P bonfire(0, 0);
  set<P> smokes;
  smokes.emplace(bonfire);
  string ans(N, '0');
  REP(i, N) {
    // Relative move of bonfire
    bonfire.first -= moveX[S[i]];
    bonfire.second -= moveY[S[i]];
    smokes.emplace(bonfire);
    P takahashi(bonfire.first + R, bonfire.second + C);
    if (smokes.count(takahashi)) {
      ans[i] = '1';
    }
  }
  return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int64_t N, R, C;
  std::string S;
  std::cin >> N >> R >> C >> S;
  auto ans = solve(N, R, C, S);
  std::cout << ans << '\n';
  return 0;
}
