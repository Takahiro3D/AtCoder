#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int N, Mg, Mh;
  cin >> N;
  vector<vector<bool>> G(N, vector<bool>(N));
  vector<vector<bool>> H(N, vector<bool>(N));
  vector<vector<int>> A(N, vector<int>(N));

  cin >> Mg;
  for (int i = 0; i < Mg; i++) {
    int u, v;
    cin >> u >> v;
    u--;
    v--;
    G[u][v] = true;
    G[v][u] = true;
  }

  cin >> Mh;
  for (int i = 0; i < Mh; i++) {
    int u, v;
    cin >> u >> v;
    u--;
    v--;
    H[u][v] = true;
    H[v][u] = true;
  }

  for (int i = 0; i < N - 1; i++) {
    for (int j = i + 1; j < N; j++) {
      int a;
      cin >> a;
      A[i][j] = a;
      A[j][i] = a;
    }
  }

  vector<int> P(N);
  for (int i = 0; i < N; i++) {
    P[i] = i;
  }

  int ans = INT32_MAX;
  do {
    int cost = 0;
    for (int i = 0; i < N; i++) {
      for (int j = 0; j < i; j++) {
        if (H[i][j] != G[P[i]][P[j]]) {
          cost += A[i][j];
        }
      }
    }
    ans = min(ans, cost);
  } while (next_permutation(P.begin(), P.end()));

  cout << ans << endl;

  return 0;
}
