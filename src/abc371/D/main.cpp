#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int N;
  cin >> N;

  vector<int64_t> X(N);
  for (auto& x : X) {
    cin >> x;
  }
  vector<int64_t> P(N);
  for (auto& p : P) {
    cin >> p;
  }

  vector<int64_t> P_sum(N + 1);
  P_sum[1] = P[0];
  for (int i = 1; i < N; i++) {
    P_sum[i + 1] = P_sum[i] + P[i];
  }

  int Q;
  cin >> Q;
  for (int i = 0; i < Q; i++) {
    int L, R;
    cin >> L >> R;

    auto L_it = lower_bound(X.begin(), X.end(), L);
    int L_index = L_it - X.begin();

    auto R_it = lower_bound(X.begin(), X.end(), R);
    int R_index = (*R_it == R) ? R_it - X.begin() + 1 : R_it - X.begin();

    auto ans = P_sum[R_index] - P_sum[L_index];
    cout << ans << "\n";
  }

  return 0;
}
