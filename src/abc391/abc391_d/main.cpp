#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

const std::string YES = "Yes";
const std::string NO = "No";

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int N;
  int W;
  int Q;
  std::cin >> N;
  std::vector<int> X(N), Y(N);
  std::cin >> W;
  REP(i, N) {
    std::cin >> X[i] >> Y[i];
    X[i]--;
  }

  // sort block ids in ascending order of Y
  vector<int> idx(N);
  REP(i, N) { idx[i] = i; }
  sort(idx.begin(), idx.end(), [&](int i, int j) { return Y[i] < Y[j]; });

  // Set block row for each columns
  vector<int> row(N);
  vector<int> num(W);
  for (int i : idx) {
    row[i] = num[X[i]];
    num[X[i]]++;
  }

  // Calculate deletion time for each rows
  vector<int> d(N, INT_MAX);
  // Block indexs in same row
  vector<vector<int>> blocks(N);
  REP(i, N) { blocks[row[i]].emplace_back(i); }
  // Loop for rows
  REP(i, N) {
    if (blocks[i].size() != W) {
      continue;
    }
    // Calculate max Y in same row
    int mx = 0;
    for (int j : blocks[i]) {
      mx = max(mx, Y[j] - 1);
    }
    d[i] = mx + 1;
  }

  std::cin >> Q;
  std::vector<int64_t> T(Q), A(Q);
  REP(i, Q) {
    int T, A;
    std::cin >> T >> A;
    A--;
    auto ans = (d[row[A]] > T) ? YES : NO;
    cout << ans << "\n";
  }

  return 0;
}
