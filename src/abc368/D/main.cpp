#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_set>
#include <utility>
#include <vector>

using namespace std;

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int N, K;
  cin >> N >> K;

  unordered_map<int, unordered_set<int>> G;
  for (int i = 0; i < N - 1; i++) {
    int A, B;
    cin >> A >> B;
    A--;
    B--;
    G[A].emplace(B);
    G[B].emplace(A);
  }

  vector<int> V(K);
  unordered_set<int> ans;
  for (auto& v : V) {
    cin >> v;
    v--;
    ans.emplace(v);
  }

  // No edge pattern
  if (N == 1) {
    cout << ans.size() << endl;
    return 0;
  }

  queue<int> q;
  for (auto [node, next] : G) {
    if (next.size() == 1) {
      q.emplace(node);
    }
  }

  while (!q.empty()) {
    auto node = q.front();
    q.pop();
    bool isRelated = (ans.find(node) != ans.end());
    if (!isRelated) {
      auto next = *G[node].begin();
      G[next].erase(node);
      if (G[next].size() == 1) {
        q.emplace(next);
      }
      G.erase(node);
    }
  }

  cout << G.size() << endl;

  return 0;
}
