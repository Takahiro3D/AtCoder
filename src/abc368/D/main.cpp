#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_set>
#include <utility>
#include <vector>

using namespace std;

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int N, K;
  cin >> N >> K;

  vector<vector<int>> G(N, vector<int>());
  for (int i = 0; i < N - 1; i++) {
    int A, B;
    cin >> A >> B;
    A--;
    B--;
    G[A].emplace_back(B);
    G[B].emplace_back(A);
  }

  vector<int> V(K);
  unordered_set<int> ans;
  for (auto& v : V) {
    cin >> v;
    v--;
    ans.emplace(v);
  }

  for (int i = 1; i < K; i++) {
    queue<int> q;
    q.emplace(V[i]);
    vector<bool> visited(N, false);
    bool found = false;
    while (!found) {
      auto node = q.front();
      q.pop();
      visited[node] = true;
      for (auto g : G[node]) {
        if (ans.find(g) != ans.end()) {
          // reverse search
          while (node != g) {
            visited[g] = false;
            for (auto g_prev : G[g]) {
              if (visited[g_prev]) {
                ans.emplace(g_prev);
                g = g_prev;
                break;
              }
            }
          }
          found = true;
          break;
        }
        if (!visited[g]) {
          q.emplace(g);
        }
      }
    }
  }

  cout << ans.size() << endl;

  return 0;
}
