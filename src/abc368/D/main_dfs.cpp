#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_set>
#include <utility>
#include <vector>

using namespace std;

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int N, K;
  cin >> N >> K;

  vector<vector<int>> G(N, vector<int>());
  for (int i = 0; i < N - 1; i++) {
    int A, B;
    cin >> A >> B;
    A--;
    B--;
    G[A].emplace_back(B);
    G[B].emplace_back(A);
  }

  vector<int> V(K);
  vector<bool> selected(N);
  for (auto& v : V) {
    cin >> v;
    v--;
    selected[v] = true;
  }

  vector<int> num(N);
  stack<pair<int, int>> st;
  vector<bool> visited(N);
  st.push({V[0], -1});

  while (!st.empty()) {
    auto [v, p] = st.top();

    if (!visited[v]) {
      visited[v] = true;
      for (auto to : G[v]) {
        if (to == p) continue;
        st.push({to, v});
      }
    } else {
      // loop back process
      if (selected[v]) {
        num[v]++;
      }
      if (p != 1) {
        num[p] += num[v];
      }
      st.pop();
    }
  }

  int ans = 0;
  for (auto n : num) {
    if (n > 0) {
      ans++;
    }
  }

  return 0;
}
