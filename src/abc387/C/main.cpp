#include <bits/stdc++.h>
using namespace std;

vector<int64_t> getDigits(int64_t number) {
  vector<int64_t> digits;

  while (number > 0) {
    digits.push_back(number % 10);
    number /= 10;
  }
  reverse(digits.begin(), digits.end());

  return digits;
}

int findLastMaxIndex(const std::vector<int64_t>& vec) {
  int maxVal = vec[0];
  int lastMaxIndex = 0;

  for (size_t i = 1; i < vec.size(); ++i) {
    if (vec[i] >= maxVal) {
      maxVal = vec[i];
      lastMaxIndex = i;
    }
  }

  return lastMaxIndex;
}

int findLastMinIndex(const std::vector<int64_t>& vec) {
  int minVal = vec[0];
  int lastMinIndex = 0;

  for (size_t i = 1; i < vec.size(); ++i) {
    if (vec[i] <= minVal) {
      minVal = vec[i];
      lastMinIndex = i;
    }
  }

  return lastMinIndex;
}

// 整数用切り上げ関数
int64_t ceilToDigit(int64_t number, int targetDigit) {
  int64_t factor = std::pow(10, targetDigit);
  if (number % factor != 0) {
    number = ((number / factor) + 1) * factor;
  }
  return number;
}

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int64_t L, R;
  cin >> L >> R;

  int64_t ans = 0;
  auto tmp = L;
  while (tmp <= R) {
    auto digits = getDigits(tmp);
    // auto front = digits.front();
    auto size = digits.size();

    // auto maxIt = max_element(digits.begin(), digits.end());
    // auto maxIndex = distance(digits.begin(), maxIt);
    auto maxIndex = findLastMaxIndex(digits);
    // auto minIt = min_element(digits.begin(), digits.end());
    auto minIndex = findLastMinIndex(digits);

    if (maxIndex == 0) {
      ans++;
      // Increase min digit
      tmp = ceilToDigit(tmp, size - 1 - minIndex);
    } else {
      // Increase max digit
      tmp = ceilToDigit(tmp, size - 1 - maxIndex);
    }
  }

  cout << ans << endl;

  return 0;
}
