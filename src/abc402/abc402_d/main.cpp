#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

int64_t solve(int64_t N, int64_t M, const std::vector<int64_t> &A, const std::vector<int64_t> &B) {
  // Calculate all combinations
  int64_t ans = M * (M - 1) / 2;

  // Remove parallel lines combination
  vector<int64_t> cnt(N);
  for (int i = 0; i < M; i++) {
    auto x = (A[i] + B[i]) % N;
    ans -= cnt[x];
    cnt[x]++;
  }
  return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int64_t N;
  int M;
  std::cin >> N >> M;
  std::vector<int64_t> A(M), B(M);
  REP(i, M) { std::cin >> A[i] >> B[i]; }
  auto ans = solve(N, M, A, B);
  std::cout << ans << '\n';
  return 0;
}
