#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

int64_t solve(int64_t N, std::string S) {
  vector<int> V;
  REP(i, S.size()) {
    if (S[i] == '1') {
      V.emplace_back(i);
    }
  }
  int64_t avg = accumulate(ALL(V), 0LL) / V.size();

  auto calc = [&](auto avg) {
    int64_t ret = 0;
    auto it = lower_bound(ALL(V), avg);
    auto dist = distance(V.begin(), it);
    REP(i, V.size()) {
      auto idx = *it - (dist - i);
      ret += abs(idx - V[i]);
    }
    return ret;
  };

  auto ans = calc(avg);
  ans = min(ans, calc(avg++));

  return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int64_t N;
  std::string S;
  std::cin >> N >> S;
  auto ans = solve(N, S);
  std::cout << ans << '\n';
  return 0;
}
