#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

auto solve(int N, int64_t K, const std::vector<int64_t> &A) {
  int M = *max_element(begin(A), end(A));
  M++;

  // count of number in A
  vector<int> num(M);
  for (int a : A) {
    num[a]++;
  }

  // count of divisor
  vector<int> c(M);
  for (int d = 1; d < M; d++) {
    // c[d] is divisor of multiples of d
    for (int i = d; i < M; i += d) {
      c[d] += num[i];
    }
  }

  // calc max subset of GCD
  vector<int> best(M);
  for (int g = 1; g < M; g++) {
    if (c[g] < K) continue;
    for (int i = g; i < M; i += g) {
      best[i] = max(best[i], g);
    }
  }

  std::vector<int64_t> ans;
  for (int a : A) {
    ans.emplace_back(best[a]);
  }

  return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int N;
  int64_t K;
  std::cin >> N;
  std::vector<int64_t> A(N);
  std::cin >> K;
  REP(i, N) { std::cin >> A[i]; }
  auto ans = solve(N, K, A);
  REP(i, N) { std::cout << ans[i] << '\n'; }
  return 0;
}
