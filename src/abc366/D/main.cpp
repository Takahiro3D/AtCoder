#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int N;
  cin >> N;

  vector<vector<vector<int64_t>>> A(N, vector<vector<int64_t>>(N, vector<int64_t>(N)));
  for (int x = 0; x < N; x++) {
    for (int y = 0; y < N; y++) {
      for (int z = 0; z < N; z++) {
        cin >> A[x][y][z];
      }
    }
  }

  // comulative sum
  vector<vector<vector<int64_t>>> A_cs(N + 1, vector<vector<int64_t>>(N + 1, vector<int64_t>(N + 1)));
  for (int x = 0; x < N; x++) {
    for (int y = 0; y < N; y++) {
      for (int z = 0; z < N; z++) {
        A_cs[x + 1][y + 1][z + 1] = A[x][y][z];
      }
    }
  }
  // x-axis
  for (int x = 0; x < N; x++) {
    for (int y = 0; y <= N; y++) {
      for (int z = 0; z <= N; z++) {
        A_cs[x + 1][y][z] += A_cs[x][y][z];
      }
    }
  }
  // y-axis
  for (int x = 0; x <= N; x++) {
    for (int y = 0; y < N; y++) {
      for (int z = 0; z <= N; z++) {
        A_cs[x][y + 1][z] += A_cs[x][y][z];
      }
    }
  }
  // z-axis
  for (int x = 0; x <= N; x++) {
    for (int y = 0; y <= N; y++) {
      for (int z = 0; z < N; z++) {
        A_cs[x][y][z + 1] += A_cs[x][y][z];
      }
    }
  }

  int Q;
  cin >> Q;
  for (int i = 0; i < Q; i++) {
    int Lx, Rx, Ly, Ry, Lz, Rz;
    cin >> Lx >> Rx >> Ly >> Ry >> Lz >> Rz;
    Lx--;
    Ly--;
    Lz--;

    cout << A_cs[Rx][Ry][Rz] - A_cs[Lx][Ry][Rz] - A_cs[Rx][Ly][Rz] - A_cs[Rx][Ry][Lz] + A_cs[Lx][Ly][Rz] +
                A_cs[Lx][Ry][Lz] + A_cs[Rx][Ly][Lz] - A_cs[Lx][Ly][Lz]
         << "\n";
  }

  return 0;
}
