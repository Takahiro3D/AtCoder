#include <bits/stdc++.h>
using namespace std;

// up, down, right, left
int move_h[] = {1, -1, 0, 0};
int move_w[] = {0, 0, 1, -1};

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int H, W, D;
  cin >> H >> W >> D;

  array<array<char, 1000>, 1000> S{};
  for (int i = 0; i < H; i++) {
    for (int j = 0; j < W; j++) {
      cin >> S[i][j];
    }
  }

  array<array<int, 1000>, 1000> visited;
  for (auto& row : visited) {
    row.fill(10000000);
  }
  auto addHumidified = [&](auto& s, int h, int w) {
    // BFS
    queue<pair<int, int>> q;
    q.emplace(h, w);
    while (!q.empty()) {
      auto coord = q.front();
      q.pop();
      s.emplace(coord.first, coord.second);
      auto dist = (abs(coord.second - w) + abs(coord.first - h));
      for (int k = 0; k < 4; k++) {
        int i = coord.first + move_h[k];
        int j = coord.second + move_w[k];
        auto dist_new = (abs(j - w) + abs(i - h));
        if ((i >= 0) && (i < H) && (j >= 0) && (j < W) && (dist_new > dist) && (dist_new <= D)) {
          if ((dist_new < visited[i][j]) && (S[i][j] == '.')) {
            visited[i][j] = dist_new;
            q.emplace(i, j);
          }
        }
      }
    }
  };

  set<pair<int, int>> s;
  for (int i = 0; i < H; i++) {
    for (int j = 0; j < W; j++) {
      if (S[i][j] == 'H') {
        addHumidified(s, i, j);
      }
    }
  }

  cout << s.size() << endl;

  return 0;
}
