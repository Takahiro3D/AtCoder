#include <bits/stdc++.h>
using namespace std;

// up, down, right, left
int move_h[] = {1, -1, 0, 0};
int move_w[] = {0, 0, 1, -1};

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int H, W, D;
  cin >> H >> W >> D;

  array<array<char, 1000>, 1000> S{};
  for (int i = 0; i < H; i++) {
    for (int j = 0; j < W; j++) {
      cin >> S[i][j];
    }
  }

  array<array<int, 1000>, 1000> dist;
  for (auto& row : dist) {
    row.fill(10000000);
  }
  queue<pair<int, int>> q;

  set<pair<int, int>> s;
  for (int i = 0; i < H; i++) {
    for (int j = 0; j < W; j++) {
      if (S[i][j] == 'H') {
        dist[i][j] = 0;
        q.emplace(i, j);
        s.emplace(i, j);
      }
    }
  }
  // BFS
  while (!q.empty()) {
    auto coord = q.front();
    q.pop();
    for (int k = 0; k < 4; k++) {
      int i = coord.first + move_h[k];
      int j = coord.second + move_w[k];
      auto dist_new = dist[coord.first][coord.second] + 1;
      if ((i >= 0) && (i < H) && (j >= 0) && (j < W) && (dist_new <= D)) {
        if ((dist_new < dist[i][j]) && (S[i][j] == '.')) {
          dist[i][j] = dist_new;
          q.emplace(i, j);
          s.emplace(i, j);
        }
      }
    }
  }

  cout << s.size() << endl;

  return 0;
}
