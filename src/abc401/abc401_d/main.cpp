#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n) - 1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n) - 1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

std::string solve(int64_t N, int64_t K, std::string S) {
  auto ans = S;
  int num_o = 0;
  REP(i, N) {
    if (S[i] == 'o') {
      num_o++;
      if (i + 1 < N) {
        ans[i + 1] = '.';
      }
      if (i > 0) {
        ans[i - 1] = '.';
      }
    }
  }

  unordered_map<int, vector<int>> um_consective_num;
  int consective_num = 0;
  int consective_index = 0;
  REP(i, N) {
    if (ans[i] == '?') {
      if (consective_num == 0) {
        consective_index = i;
      }
      consective_num++;
    } else {
      if (consective_num > 0) {
        um_consective_num[consective_num].emplace_back(consective_index);
        consective_num = 0;
      }
    }
  }
  if (consective_num > 0) {
    um_consective_num[consective_num].emplace_back(consective_index);
    consective_num = 0;
  }

  int max_o = 0;
  for (auto [key, v] : um_consective_num) {
    max_o += (key + 1) / 2 * v.size();
  }

  if (max_o + num_o == K) {
    for (auto [key, v] : um_consective_num) {
      if (key % 2 == 0) {
        continue;
      }
      for (auto index : v) {
        bool o = true;
        for (int i = 0; i < key; i++) {
          ans[i + index] = o ? 'o' : '.';
          o = !o;
        }
      }
    }
  }
  if (num_o == K) {
    for (auto& s : ans) {
      if (s == '?') {
        s = '.';
      }
    }
  }
  return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int64_t N, K;
  std::string S;
  std::cin >> N >> K >> S;
  auto ans = solve(N, K, S);
  std::cout << ans << '\n';
  return 0;
}
