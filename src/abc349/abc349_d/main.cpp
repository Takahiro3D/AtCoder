#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

using Pi = pair<int64_t, int64_t>;
using Vp = vector<Pi>;

int64_t pow2(int64_t e) { return (int64_t)1 << e; }

int64_t log2I(int64_t n) {
  assert(n > 0);
  return bit_width(static_cast<uint64_t>(n)) - 1;
}

Vp solve(int64_t L, int64_t R) {
  Vp ans;
  while (L != R) {
    // max width for L
    auto a = (L > 0) ? (L & -L) : INT64_MAX;
    // max witdth of pow2 between L and R
    auto max_e = log2I(R - L);
    auto maxPow2 = pow2(max_e);
    a = min(a, maxPow2);
    ans.emplace_back(Pi(L, L + a));
    L += a;
  }
  return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int64_t L, R;
  std::cin >> L >> R;
  Vp ans = solve(L, R);
  std::cout << ans.size() << '\n';
  for (auto p : ans) {
    std::cout << p.first << ' ' << p.second << '\n';
  }
  return 0;
}
