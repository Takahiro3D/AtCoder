#include <bits/stdc++.h>
using namespace std;

unordered_map<char, pair<int64_t, int64_t>> moveS = {{'U', {0, 1}}, {'D', {0, -1}}, {'L', {-1, 0}}, {'R', {1, 0}}};

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int64_t N, M, Sx, Sy;
  cin >> N >> M >> Sx >> Sy;

  unordered_map<int64_t, set<int64_t>> Vx;
  unordered_map<int64_t, set<int64_t>> Vy;
  for (int i = 0; i < N; i++) {
    int64_t X, Y;
    cin >> X >> Y;
    Vx[Y].emplace(X);
    Vy[X].emplace(Y);
  }

  int ans = 0;
  for (int i = 0; i < M; i++) {
    char D;
    int64_t C;
    cin >> D >> C;
    auto m = moveS[D];
    auto x = Sx + m.first * C;
    auto y = Sy + m.second * C;
    auto isMoveX = m.first != 0;
    if (isMoveX) {
      auto& s = Vx[y];
      auto l = min(Sx, x);
      auto u = max(Sx, x);
      auto lower = s.lower_bound(l);
      auto upper = s.upper_bound(u);
      ans += std::distance(lower, upper);
      for (auto it = lower; it != upper; ++it) {
        Vy[*it].erase(y);
      }
      s.erase(lower, upper);
    } else {
      auto& s = Vy[x];
      auto l = min(Sy, y);
      auto u = max(Sy, y);
      auto lower = s.lower_bound(l);
      auto upper = s.upper_bound(u);
      ans += std::distance(lower, upper);
      for (auto it = lower; it != upper; ++it) {
        Vx[*it].erase(x);
      }
      s.erase(lower, upper);
    }
    Sx = x;
    Sy = y;
  }
  cout << Sx << " " << Sy << " " << ans << endl;

  return 0;
}
