#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

int64_t genPalindromic(const vector<int>& v, int d) {
  int comp = (d % 2 == 0) ? 0 : -1;

  string s;
  int size = v.size();
  for (int i = 0; i < size + comp; i++) {
    s += to_string(v[i]);
  }
  for (int i = size; i > 0; i--) {
    s += to_string(v[i - 1]);
  }
  return stoll(s);
}

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int N;
  cin >> N;

  int64_t ans;
  // 1 digit
  if (N <= 10) {
    ans = N - 1;
  } else {
    int digit = 2;
    int n = N - 10;
    while (true) {
      int half = digit / 2;
      int num = 1;
      for (int i = 0; i < half; i++) {
        num *= 10;
      }
      if (n <= 9 * num) {
        vector<int> v;
        for (int i = 0; i <= half; i++) {
          int d = n / num;
          v.emplace_back(d);
          n -= d * num;
          num /= 10;
        }
        ans = genPalindromic(v, digit);
        break;
      }
      n -= num;
      digit++;
    }
  }
  cout << ans << endl;

  return 0;
}
