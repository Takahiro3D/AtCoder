#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

using Graph = vector<vector<int>>;
using Matrix = vector<vector<bool>>;

int64_t solve(auto N, auto M, const std::vector<int> &A, const std::vector<int> &B) {
  Graph g(N);
  Matrix m(N, vector(N, false));
  for (int i = 0; i < M; i++) {
    int a = A[i] - 1;
    int b = B[i] - 1;
    g[a].emplace_back(b);
    g[b].emplace_back(a);
    m[a][b] = true;
    m[b][a] = true;
  }

  int64_t ans = 0;
  for (int i = 0; i < N; i++) {
    int size = g[i].size();
    for (int j = 0; j < size - 1; j++) {
      int Gj = g[i][j];
      for (int k = j + 1; k < size; k++) {
        int Gk = g[i][k];
        if (!m[Gj][Gk]) {
          g[Gj].emplace_back(Gk);
          g[Gk].emplace_back(Gj);
          m[Gj][Gk] = true;
          m[Gk][Gj] = true;
          ans++;
        }
      }
    }
  }
  return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int N, M;
  std::cin >> N >> M;
  std::vector<int> A(M), B(M);
  REP(i, M) { std::cin >> A[i] >> B[i]; }
  auto ans = solve(N, M, A, B);
  std::cout << ans << '\n';
  return 0;
}
