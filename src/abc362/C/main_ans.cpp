#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

const string YES = "Yes";
const string NO = "No";

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int N;
  cin >> N;

  // pair (L, R)
  vector<pair<int, int>> vp(N);
  for (auto& p : vp) {
    cin >> p.first >> p.second;
  }

  // pair (min, max)
  vector<pair<int64_t, int64_t>> X(N + 1);
  int size = vp.size();
  for (int i = 0; i < size; i++) {
    X[i + 1].first = X[i].first + vp[i].first;
    X[i + 1].second = X[i].second + vp[i].second;
  }

  auto ans = ((X.back().first <= 0) && (X.back().second >= 0)) ? YES : NO;
  cout << ans << endl;

  if (ans == YES) {
    // gen sum 0 vector
    vector<int> ansX(N);
    int64_t sumX = 0;
    for (int i = 0; i < size; i++) {
      ansX[i] = min(max(0, vp[i].first), vp[i].second);
      sumX += ansX[i];
    }

    for (int i = 0; i < size; i++) {
      if (sumX > 0) {
        int64_t comp_max = ansX[i] - vp[i].first;
        int64_t comp = min(comp_max, sumX);
        ansX[i] -= comp;
        sumX -= comp;
      } else if (sumX < 0) {
        int64_t comp_max = vp[i].second - ansX[i];
        int64_t comp = min(comp_max, -sumX);
        ansX[i] += comp;
        sumX += comp;
      } else {
        break;
      }
    }

    for (auto x : ansX) {
      cout << x << " ";
    }
    cout << endl;
  }

  return 0;
}
