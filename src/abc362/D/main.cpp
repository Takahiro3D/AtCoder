#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

struct Edge {
  int to;
  int cost;
};
using Graph = vector<vector<Edge>>;
using P = pair<int64_t, int>;

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int N, M;
  cin >> N >> M;

  vector<int> A(N);
  for (int i = 0; i < N; i++) {
    cin >> A[i];
  }

  // Marix graph
  Graph g(N);
  for (int i = 0; i < M; i++) {
    int U, V, B;
    cin >> U >> V >> B;
    U--;
    V--;
    g[U].emplace_back(V, B + A[V]);
    g[V].emplace_back(U, B + A[U]);
  }

  vector<int64_t> dist(N, INT64_MAX);
  priority_queue<P, vector<P>, greater<P>> q;
  dist[0] = A[0];
  q.emplace(A[0], 0);
  while (!q.empty()) {
    auto [d, v] = q.top();
    q.pop();

    // The dist is updated by other route
    if (dist[v] != d) {
      continue;
    }

    // Loop all edges
    for (auto e : g[v]) {
      int64_t next_dist = d + e.cost;
      if (next_dist >= dist[e.to]) {
        continue;
      }
      dist[e.to] = next_dist;
      q.emplace(next_dist, e.to);
    }
  }

  for (int i = 1; i < N; i++) {
    cout << dist[i] << " ";
  }
  cout << endl;

  return 0;
}
