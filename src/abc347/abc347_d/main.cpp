#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

constexpr int64_t MOD = 998244353;
vector<int64_t> solve(int64_t a, int64_t b, int64_t C) {
  bitset<60> c(C);

  auto d = div((a + b - c.count()), (int64_t)2);
  if ((d.rem != 0) || (d.quot < 0)) {
    // XY pair will not be found.
    return {-1};
  }

  int a_count = a - d.quot;
  int b_count = b - d.quot;
  int and_count = d.quot;

  bitset<60> x;
  bitset<60> y;
  int size = c.size();

  int rem_digit = 60 - c.count();
  if ((and_count > rem_digit) || (a_count < 0) || (b_count < 0)) {
    // XY pair will not be found.
    return {-1};
  }

  for (int i = 0; i < size; i++) {
    if (c[i]) {
      if (a_count > 0) {
        x.set(i);
        a_count--;
      } else {
        y.set(i);
        b_count--;
      }
    } else {
      if (and_count > 0) {
        x.set(i);
        y.set(i);
        and_count--;
      }
    }
  }
  auto X = static_cast<int64_t>(x.to_ullong());
  auto Y = static_cast<int64_t>(y.to_ullong());
  return {X, Y};
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int64_t a, b, C;
  std::cin >> a >> b >> C;
  auto v = solve(a, b, C);
  // failed to analyze output format
  for (auto it : v) {
    cout << it << ' ';
  }
  std::cout << '\n';
  return 0;
}
