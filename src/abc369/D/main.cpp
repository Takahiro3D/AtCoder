#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int N;
  cin >> N;

  vector<int64_t> A(N);
  for (int i = 0; i < N; i++) {
    cin >> A[i];
  }

  // {exp, kill num}
  vector<vector<pair<int64_t, int>>> dp(N + 1, vector<pair<int64_t, int>>(2));
  dp[0][0] = {0, 0};
  dp[0][1] = {0, 0};
  for (int i = 0; i < N; i++) {
    // escape
    dp[i + 1][0] = max(dp[i][0], dp[i][1]);

    // kill
    auto exp0 = dp[i][0].first;
    auto kill0 = dp[i][0].second + 1;
    exp0 += (kill0 % 2 == 0) ? 2LL * A[i] : A[i];
    auto exp1 = dp[i][1].first;
    auto kill1 = dp[i][1].second + 1;
    exp1 += (kill1 % 2 == 0) ? 2LL * A[i] : A[i];
    if (exp0 > exp1) {
      dp[i + 1][1] = {exp0, kill0};
    } else if (exp1 > exp0) {
      dp[i + 1][1] = {exp1, kill1};
    } else if (kill0 > kill1) {
      dp[i + 1][1] = {exp0, kill0};
    } else {
      dp[i + 1][1] = {exp1, kill1};
    }
  }

  auto ans = max(dp[N][0], dp[N][1]);
  cout << ans.first << endl;

  return 0;
}
