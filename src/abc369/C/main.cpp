#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

vector<pair<int, int>> rle_compress(const vector<int>& input) {
  vector<pair<int, int>> result;
  if (input.empty()) {
    return result;
  }
  int current_num = input[0];
  int count = 1;

  for (size_t i = 1; i < input.size(); ++i) {
    if (input[i] == current_num) {
      ++count;
    } else {
      result.push_back({current_num, count});
      current_num = input[i];
      count = 1;
    }
  }
  result.push_back({current_num, count});

  return result;
}

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can
// remove this line by using your custom template)
int main() {
  int N;
  cin >> N;

  vector<int> A(N);
  for (int i = 0; i < N; i++) {
    cin >> A[i];
  }
  vector<int> D(N - 1);
  for (int i = 0; i < N - 1; i++) {
    D[i] = A[i + 1] - A[i];
  }

  auto rle = rle_compress(D);

  // (N, N)
  int64_t ans = N;
  // (N, N+x)
  for (auto p : rle) {
    int64_t len = p.second;

    int64_t n = len;
    ans += (n * (n + 1LL)) / 2LL;
  }

  cout << ans << endl;

  return 0;
}
